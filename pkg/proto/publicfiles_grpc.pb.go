// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/publicfiles.proto

package publicfiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicFilesGRPCService_GetPostFilesIDByChannelIDAndMediaGroupID_FullMethodName = "/proto.PublicFilesGRPCService/GetPostFilesIDByChannelIDAndMediaGroupID"
)

// PublicFilesGRPCServiceClient is the client API for PublicFilesGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicFilesGRPCServiceClient interface {
	GetPostFilesIDByChannelIDAndMediaGroupID(ctx context.Context, in *GetPostFilesIDByChannelIDAndMediaGroupIDRequest, opts ...grpc.CallOption) (*GetPostFilesIDByChannelIDAndMediaGroupIDResponse, error)
}

type publicFilesGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicFilesGRPCServiceClient(cc grpc.ClientConnInterface) PublicFilesGRPCServiceClient {
	return &publicFilesGRPCServiceClient{cc}
}

func (c *publicFilesGRPCServiceClient) GetPostFilesIDByChannelIDAndMediaGroupID(ctx context.Context, in *GetPostFilesIDByChannelIDAndMediaGroupIDRequest, opts ...grpc.CallOption) (*GetPostFilesIDByChannelIDAndMediaGroupIDResponse, error) {
	out := new(GetPostFilesIDByChannelIDAndMediaGroupIDResponse)
	err := c.cc.Invoke(ctx, PublicFilesGRPCService_GetPostFilesIDByChannelIDAndMediaGroupID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicFilesGRPCServiceServer is the server API for PublicFilesGRPCService service.
// All implementations must embed UnimplementedPublicFilesGRPCServiceServer
// for forward compatibility
type PublicFilesGRPCServiceServer interface {
	GetPostFilesIDByChannelIDAndMediaGroupID(context.Context, *GetPostFilesIDByChannelIDAndMediaGroupIDRequest) (*GetPostFilesIDByChannelIDAndMediaGroupIDResponse, error)
	mustEmbedUnimplementedPublicFilesGRPCServiceServer()
}

// UnimplementedPublicFilesGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicFilesGRPCServiceServer struct {
}

func (UnimplementedPublicFilesGRPCServiceServer) GetPostFilesIDByChannelIDAndMediaGroupID(context.Context, *GetPostFilesIDByChannelIDAndMediaGroupIDRequest) (*GetPostFilesIDByChannelIDAndMediaGroupIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostFilesIDByChannelIDAndMediaGroupID not implemented")
}
func (UnimplementedPublicFilesGRPCServiceServer) mustEmbedUnimplementedPublicFilesGRPCServiceServer() {
}

// UnsafePublicFilesGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicFilesGRPCServiceServer will
// result in compilation errors.
type UnsafePublicFilesGRPCServiceServer interface {
	mustEmbedUnimplementedPublicFilesGRPCServiceServer()
}

func RegisterPublicFilesGRPCServiceServer(s grpc.ServiceRegistrar, srv PublicFilesGRPCServiceServer) {
	s.RegisterService(&PublicFilesGRPCService_ServiceDesc, srv)
}

func _PublicFilesGRPCService_GetPostFilesIDByChannelIDAndMediaGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostFilesIDByChannelIDAndMediaGroupIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFilesGRPCServiceServer).GetPostFilesIDByChannelIDAndMediaGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFilesGRPCService_GetPostFilesIDByChannelIDAndMediaGroupID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFilesGRPCServiceServer).GetPostFilesIDByChannelIDAndMediaGroupID(ctx, req.(*GetPostFilesIDByChannelIDAndMediaGroupIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicFilesGRPCService_ServiceDesc is the grpc.ServiceDesc for PublicFilesGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicFilesGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PublicFilesGRPCService",
	HandlerType: (*PublicFilesGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostFilesIDByChannelIDAndMediaGroupID",
			Handler:    _PublicFilesGRPCService_GetPostFilesIDByChannelIDAndMediaGroupID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/publicfiles.proto",
}
